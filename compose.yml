version: "3.9"

services:
  postgres:
    image: postgres:11.14
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust

  nginx:
    image: nginx:1.21.6
    ports:
      - 127.0.0.1:8880:8888
    volumes:
      - ${SOURCE_DIRECTORY}/docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ${SOURCE_DIRECTORY}/frontend:/frontend:ro

  anime-rss-devel:
    image: $USER-devel
    build:
      dockerfile: docker/Dockerfile
      target: anime-rss-devel
      args:
        - USER=$USER
        # UID is a bash variable, not an environment variable. Make sure to define it
        # explicitly before building the image or use the .env file.
        - UID=${UID:-1000}
    working_dir: $SOURCE_DIRECTORY
    volumes:
      - $SOURCE_DIRECTORY:$SOURCE_DIRECTORY
      - home-data:/home/$USER/
      - $HOME/.ssh/:/home/$USER/.ssh:ro
      - ${SSH_AUTH_SOCK:-/tmp/no-auth}:${SSH_AUTH_SOCK:-/tmp/no-auth}
    environment:
      - SSH_AUTH_SOCK=${SSH_AUTH_SOCK:-/tmp/no-auth}
    depends_on:
      - postgres
      - nginx

    # We want to run this image in infinite loop to ba able to attach to it
    # without the need to run ugly run command first.
    # `docker compose run --use-aliases --service-ports devel`
    # With the infinite command we can just do `docker compose exec`.
    command: sleep infinity

  opentelemetry-collector:
    image:  otel/opentelemetry-collector-contrib:0.75.0
    volumes:
      - ./docker/otel-collector-config.yml:/etc/otel-collector-config.yml
    command: [ "--config=/etc/otel-collector-config.yml" ]
    depends_on:
      - loki
      - tempo
      - prometheus

  loki:
    image: grafana/loki:2.8.0
    volumes:
      - ./docker/loki.yaml:/etc/loki/local-config.yaml
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    user: "1000:1000"

  tempo:
    image: grafana/tempo:2.0.1
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo.yaml:/etc/tempo.yaml

  prometheus:
    image: prom/prometheus:v2.43.0
    command: [ "--config.file=/etc/prometheus.yaml", "--web.enable-remote-write-receiver" ]
    volumes:
      - ./docker/prometheus.yaml:/etc/prometheus.yaml

  grafana:
    image: grafana/grafana:9.4.7
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - ./docker/grafana-provisioning/:/etc/grafana/provisioning
      - ./docker/grafana.ini/:/etc/grafana/grafana.ini
    depends_on:
      - loki
      - tempo
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin


volumes:
  db-data:
  # To store user history and some other tool user specific data
  home-data:
